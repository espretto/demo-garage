swagger: "2.0"

info:
  description: |
    Cette API permet de gérér un parc automobile
  version: 1.0.0
  title: Stompyt Garage
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

host: espretto.ddns.net
basePath: /garage/api/v1.0.0
schemes:
- http

tags:
- name: car
  description: cars are parked in one garage
- name: garage
  description: one garage holds multiple cars

paths:
  /garages:
    post:
      tags:
      - garage
      summary: create a new garage
      operationId: add_garage
      consumes:
      - application/json
      parameters:
      - in: body
        name: garage
        description: garage to create
        required: true
        schema:
          $ref: "#/definitions/Garage"
      responses:
        201:
          description: OK
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: invalid input
          schema:
            $ref: "#/definitions/ApiResponse"

  /garages/{garage_id}:
    get:
      tags:
      - garage
      summary: get the details of an existing garage
      operationId: get_garage
      produces:
      - application/json
      parameters:
      - in: path
        name: garage_id
        description: id of existing garage
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/GarageDetail"
        404:
          description: garage does not exist
        400:
          description: invalid parameter
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      tags:
      - garage
      summary: delete an existing garage and all of its cars
      operationId: purge_garage
      parameters:
      - in: path
        name: garage_id
        description: id of existing garage to be purged
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        404:
          description: garage does not exist
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: invalid garage id
          schema:
            $ref: "#/definitions/ApiResponse"

  /garages/{garage_id}/cars:
    get:
      tags:
      - car
      summary: get all cars of a garage
      operationId: get_cars
      produces:
      - application/json
      parameters:
      - in: path
        name: garage_id
        description: id of garage
        required: true
        type: integer
        format: int64
      - in: query
        name: min_price
        description: minimum inclusive price
        minimum: 0
        default: 0
        type: string
        format: decimal
      - in: query
        name: max_price
        description: maximum inclusive price
        default: infinity
        minimum: 0
        type: string
        format: decimal

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Car"
        404:
          description: garage does not exist
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: invalid input
          schema:
            $ref: "#/definitions/ApiResponse"
    post:
      tags:
      - car
      summary: add a car to a garage
      operationId: add_car
      consumes:
      - application/json
      parameters:
      - in: path
        name: garage_id
        description: id of garage in which to parc the car
        required: true
        type: integer
        format: int64
      - in: body
        name: car
        description: car to create
        required: true
        schema:
          $ref: "#/definitions/Car"
      responses:
        201:
          description: OK
        404:
          description: garage does not exist
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: invalid input
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      tags:
      - car
      summary: remove all cars from a garage
      operationId: empty_garage
      parameters:
      - in: path
        name: garage_id
        description: id of garage to empty
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        404:
          description: garage does not exist
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: invalid input
          schema:
            $ref: "#/definitions/ApiResponse"

  /garages/{garage_id}/cars/{car_id}:
    get:
      tags:
      - car
      summary: get car details
      operationId: get_car
      produces:
      - application/json
      parameters:
      - in: path
        name: garage_id
        description: id of garage
        required: true
        type: integer
        format: int64
      - in: path
        name: car_id
        description: id of car
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        404:
          description: garade or car does not exist
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: invalid input
          schema:
            $ref: "#/definitions/ApiResponse"
    put:
      tags:
      - car
      summary: update existing car registration
      operationId: update_car_registration
      consumes:
      - application/json
      parameters:
      - in: path
        name: garage_id
        description: id of garage
        required: true
        type: integer
        format: int64
      - in: path
        name: car_id
        description: id of car
        required: true
        type: integer
        format: int64
      - in: body
        name: car_update
        description: new car registration
        required: true
        schema:
          type: object
          properties:
            registration:
              type: string
              pattern: "^[A-Z]{2}-\\d{3}-[A-Z]{2}$"
          required:
          - registration
      responses:
        200:
          description: OK
        404:
          description: garage or car does not exist
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: invalid input
          schema:
            $ref: "#/definitions/ApiResponse"
    delete:
      tags:
      - car
      summary: remove car from garage
      operationId: remove_car
      parameters:
      - in: path
        name: garage_id
        description: id of garage
        required: true
        type: integer
        format: int64
      - in: path
        name: car_id
        description: id of car
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: OK
        404:
          description: garage or car does not exist
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: invalid input
          schema:
            $ref: "#/definitions/ApiResponse"
definitions:
  Garage:
    type: object
    required:
    - name
    - address
    - max_capacity
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      address:
        type: string
      date_created:
        type: string
        format: date-time
      max_capacity:
        type: integer
        format: int32
        minimum: 1
  GarageDetail:
    allOf:
    - $ref: "#/definitions/Garage"
    - type: object
      properties:
        cars:
          type: array
          items:
            type: string
            format: url
  Car:
    type: object
    required:
    - registration
    - brand
    - model
    - price
    properties:
      id:
        type: "integer"
        format: "int64"
      registration:
        type: string
        pattern: "^[A-Z]{2}-\\d{3}-[A-Z]{2}$"
      brand:
        type: string
      model:
        type: string
      price:
        type: string
        format: decimal
  CarDetail:
    allOf:
    - $ref: "#/definitions/Car"
    - type: "object"
      properties:
        garage:
          type: "string"
          format: "url"
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
