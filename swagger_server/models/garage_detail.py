# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GarageDetail(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, address: str=None, date_created: datetime=None, max_capacity: int=None, cars: List[str]=None):  # noqa: E501
        """GarageDetail - a model defined in Swagger

        :param id: The id of this GarageDetail.  # noqa: E501
        :type id: int
        :param name: The name of this GarageDetail.  # noqa: E501
        :type name: str
        :param address: The address of this GarageDetail.  # noqa: E501
        :type address: str
        :param date_created: The date_created of this GarageDetail.  # noqa: E501
        :type date_created: datetime
        :param max_capacity: The max_capacity of this GarageDetail.  # noqa: E501
        :type max_capacity: int
        :param cars: The cars of this GarageDetail.  # noqa: E501
        :type cars: List[str]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'address': str,
            'date_created': datetime,
            'max_capacity': int,
            'cars': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'address': 'address',
            'date_created': 'date_created',
            'max_capacity': 'max_capacity',
            'cars': 'cars'
        }

        self._id = id
        self._name = name
        self._address = address
        self._date_created = date_created
        self._max_capacity = max_capacity
        self._cars = cars

    @classmethod
    def from_dict(cls, dikt) -> 'GarageDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GarageDetail of this GarageDetail.  # noqa: E501
        :rtype: GarageDetail
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this GarageDetail.


        :return: The id of this GarageDetail.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this GarageDetail.


        :param id: The id of this GarageDetail.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this GarageDetail.


        :return: The name of this GarageDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GarageDetail.


        :param name: The name of this GarageDetail.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def address(self) -> str:
        """Gets the address of this GarageDetail.


        :return: The address of this GarageDetail.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this GarageDetail.


        :param address: The address of this GarageDetail.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def date_created(self) -> datetime:
        """Gets the date_created of this GarageDetail.


        :return: The date_created of this GarageDetail.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: datetime):
        """Sets the date_created of this GarageDetail.


        :param date_created: The date_created of this GarageDetail.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def max_capacity(self) -> int:
        """Gets the max_capacity of this GarageDetail.


        :return: The max_capacity of this GarageDetail.
        :rtype: int
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity: int):
        """Sets the max_capacity of this GarageDetail.


        :param max_capacity: The max_capacity of this GarageDetail.
        :type max_capacity: int
        """
        if max_capacity is None:
            raise ValueError("Invalid value for `max_capacity`, must not be `None`")  # noqa: E501
        if max_capacity is not None and max_capacity < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_capacity`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_capacity = max_capacity

    @property
    def cars(self) -> List[str]:
        """Gets the cars of this GarageDetail.


        :return: The cars of this GarageDetail.
        :rtype: List[str]
        """
        return self._cars

    @cars.setter
    def cars(self, cars: List[str]):
        """Sets the cars of this GarageDetail.


        :param cars: The cars of this GarageDetail.
        :type cars: List[str]
        """

        self._cars = cars
