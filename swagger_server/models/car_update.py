# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CarUpdate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, registration: str=None):  # noqa: E501
        """CarUpdate - a model defined in Swagger

        :param registration: The registration of this CarUpdate.  # noqa: E501
        :type registration: str
        """
        self.swagger_types = {
            'registration': str
        }

        self.attribute_map = {
            'registration': 'registration'
        }

        self._registration = registration

    @classmethod
    def from_dict(cls, dikt) -> 'CarUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The car_update of this CarUpdate.  # noqa: E501
        :rtype: CarUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def registration(self) -> str:
        """Gets the registration of this CarUpdate.


        :return: The registration of this CarUpdate.
        :rtype: str
        """
        return self._registration

    @registration.setter
    def registration(self, registration: str):
        """Sets the registration of this CarUpdate.


        :param registration: The registration of this CarUpdate.
        :type registration: str
        """
        if registration is None:
            raise ValueError("Invalid value for `registration`, must not be `None`")  # noqa: E501
        if registration is not None and not re.search(r'^[A-Z]{2}-\\d{3}-[A-Z]{2}$', registration):  # noqa: E501
            raise ValueError("Invalid value for `registration`, must be a follow pattern or equal to `/^[A-Z]{2}-\\d{3}-[A-Z]{2}$/`")  # noqa: E501

        self._registration = registration
