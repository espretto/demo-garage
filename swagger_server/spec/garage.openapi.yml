---
swagger: "2.0"
info:
  description: "Cette API permet de gérér un parc automobile\n"
  version: "1.0.0"
  title: "Garage"
  license:
    name: "MIT"
    url: "https://github.com/espretto/demo-garage/LICENCE"
host: "espretto.ddns.net"
basePath: "/garage/api/1.0.0"
schemes:
- "http"
tags:
- name: "car"
  description: "cars are parked in one garage"
- name: "garage"
  description: "one garage holds multiple cars"
paths:
  /garages:
    post:
      tags:
      - "garage"
      summary: "create a new garage"
      operationId: "add_garage"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "garage"
        description: "garage to create"
        required: true
        schema:
          $ref: "#/definitions/Garage"
      responses:
        "201":
          description: "OK"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "swagger_server.controllers.garage_controller"
  /garages/{garage_id}:
    get:
      tags:
      - "garage"
      summary: "get the details of an existing garage"
      operationId: "get_garage"
      produces:
      - "application/json"
      parameters:
      - name: "garage_id"
        in: "path"
        description: "id of existing garage"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/GarageDetail"
        "400":
          description: "invalid parameter"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "garage does not exist"
      x-swagger-router-controller: "swagger_server.controllers.garage_controller"
    delete:
      tags:
      - "garage"
      summary: "delete an existing garage and all of its cars"
      operationId: "purge_garage"
      parameters:
      - name: "garage_id"
        in: "path"
        description: "id of existing garage to be purged"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "invalid garage id"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "garage does not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "swagger_server.controllers.garage_controller"
  /garages/{garage_id}/cars:
    get:
      tags:
      - "car"
      summary: "get all cars of a garage"
      operationId: "get_cars"
      produces:
      - "application/json"
      parameters:
      - name: "garage_id"
        in: "path"
        description: "id of garage"
        required: true
        type: "integer"
        format: "int64"
      - name: "min_price"
        in: "query"
        description: "minimum inclusive price"
        required: false
        type: "string"
        default: "0"
        minimum: 0
        format: "decimal"
      - name: "max_price"
        in: "query"
        description: "maximum inclusive price"
        required: false
        type: "string"
        default: "infinity"
        minimum: 0
        format: "decimal"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Car"
        "400":
          description: "invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "garage does not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "swagger_server.controllers.car_controller"
    post:
      tags:
      - "car"
      summary: "add a car to a garage"
      operationId: "add_car"
      consumes:
      - "application/json"
      parameters:
      - name: "garage_id"
        in: "path"
        description: "id of garage in which to parc the car"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "car"
        description: "car to create"
        required: true
        schema:
          $ref: "#/definitions/Car"
      responses:
        "201":
          description: "OK"
        "400":
          description: "invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "garage does not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "swagger_server.controllers.car_controller"
    delete:
      tags:
      - "car"
      summary: "remove all cars from a garage"
      operationId: "empty_garage"
      parameters:
      - name: "garage_id"
        in: "path"
        description: "id of garage to empty"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "garage does not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "swagger_server.controllers.car_controller"
  /garages/{garage_id}/cars/{car_id}:
    get:
      tags:
      - "car"
      summary: "get car details"
      operationId: "get_car"
      produces:
      - "application/json"
      parameters:
      - name: "garage_id"
        in: "path"
        description: "id of garage"
        required: true
        type: "integer"
        format: "int64"
      - name: "car_id"
        in: "path"
        description: "id of car"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "garade or car does not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "swagger_server.controllers.car_controller"
    put:
      tags:
      - "car"
      summary: "update existing car registration"
      operationId: "update_car_registration"
      consumes:
      - "application/json"
      parameters:
      - name: "garage_id"
        in: "path"
        description: "id of garage"
        required: true
        type: "integer"
        format: "int64"
      - name: "car_id"
        in: "path"
        description: "id of car"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "car_update"
        description: "new car registration"
        required: true
        schema:
          $ref: "#/definitions/car_update"
      responses:
        "200":
          description: "OK"
        "400":
          description: "invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "garage or car does not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "swagger_server.controllers.car_controller"
    delete:
      tags:
      - "car"
      summary: "remove car from garage"
      operationId: "remove_car"
      parameters:
      - name: "garage_id"
        in: "path"
        description: "id of garage"
        required: true
        type: "integer"
        format: "int64"
      - name: "car_id"
        in: "path"
        description: "id of car"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
        "400":
          description: "invalid input"
          schema:
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "garage or car does not exist"
          schema:
            $ref: "#/definitions/ApiResponse"
      x-swagger-router-controller: "swagger_server.controllers.car_controller"
definitions:
  Garage:
    type: "object"
    required:
    - "address"
    - "max_capacity"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      address:
        type: "string"
      date_created:
        type: "string"
        format: "date-time"
      max_capacity:
        type: "integer"
        format: "int32"
        minimum: 1
    example:
      address: "address"
      date_created: "2000-01-23T04:56:07.000+00:00"
      max_capacity: 1
      name: "name"
      id: 0
  GarageDetail:
    allOf:
    - $ref: "#/definitions/Garage"
    - type: "object"
      properties:
        cars:
          type: "array"
          items:
            type: "string"
            format: "url"
  Car:
    type: "object"
    required:
    - "brand"
    - "model"
    - "price"
    - "registration"
    properties:
      id:
        type: "integer"
        format: "int64"
      registration:
        type: "string"
        pattern: "^[A-Z]{2}-\\d{3}-[A-Z]{2}$"
        x-regex: "^[A-Z]{2}-\\\\d{3}-[A-Z]{2}$"
        x-modifiers: []
      brand:
        type: "string"
      model:
        type: "string"
      price:
        type: "string"
        format: "decimal"
    example:
      price: "price"
      registration: "registration"
      model: "model"
      id: 0
      brand: "brand"
  CarDetail:
    allOf:
    - $ref: "#/definitions/Car"
    - type: "object"
      properties:
        garage:
          type: "string"
          format: "url"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
  car_update:
    type: "object"
    required:
    - "registration"
    properties:
      registration:
        type: "string"
        pattern: "^[A-Z]{2}-\\d{3}-[A-Z]{2}$"
        x-regex: "^[A-Z]{2}-\\\\d{3}-[A-Z]{2}$"
        x-modifiers: []
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
